import moment from 'moment';
import { TimeManagementState } from '@/types/TimeManagementState';
import { Reservation } from '@/types/Reservations';

const state: TimeManagementState = {
  startingDay: moment().toISOString(),
  reservations: [],
  autoGeneratedReservations: [],
};

const getters = {
  startingDay: (state: TimeManagementState) => moment(state.startingDay),
  reservations: (state: TimeManagementState) => state.reservations,
  autoGeneratedReservations: (state: TimeManagementState) => state.autoGeneratedReservations,
};

const mutations = {
  incrementWeek() {
    const currentStartingDate = state.startingDay;
    const incrementedStartingDate = moment(currentStartingDate).add(7, 'days').endOf('day');
    state.startingDay = moment(incrementedStartingDate).toISOString();
  },
  decrementWeek() {
    const currentStartingDate = state.startingDay;
    const incrementedStartingDate = moment(currentStartingDate).subtract(7, 'days').endOf('day');
    state.startingDay = moment(incrementedStartingDate).toISOString();
  },
  addReservation(
    state: TimeManagementState,
    reservation: {
      day: any,
      hour: number,
      minute: number,
    },
  ) {
    state.reservations.push(reservation);
  },
  autoGenerateRandomReservations() {
    const startingDay: any = moment(state.startingDay);
    const randomNumber = (min: number, max: number): number => (
      Math.floor(Math.random() * (max - min + 1) + min)
    );
    const minutes: number[] = [0, 30];

    for (let index = 0; index < 15; index++) {
      const reservation: Reservation = {
        day: moment().day(randomNumber(1, 7)),
        hour: randomNumber(0, 23),
        minute: minutes[Math.round(Math.random())],
      };
      state.autoGeneratedReservations.push(reservation);
    }
  },
};

export default {
  state,
  getters,
  mutations,
};
